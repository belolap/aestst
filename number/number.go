package main

import (
	"fmt"
	"math/rand"
	"time"
)

// Задача поиска числа давно известная, решается либо через
// сумму, либо через XOR. Решим через сумму. Сумма последовательности натуральных
// чисел равна n(n-1)/2. Из суммы всех натуральных чисел на отрезке [1; n]
// вычитаем сумму фактически полученных чисел в слайсе. Разница и будет
// потерянное число. Сложность - O(n).

// findNumber возвращает недостающее число из последовательности натуральных чисел.
func findNumber(n []int) int {
	t := len(n) * (len(n) - 1) / 2
	c := 0
	for _, v := range n {
		c += v
	}
	return t - c
}

func main() {
	// Инициализируем генератор псевдослучайных чисел.
	rand.Seed(time.Now().UnixNano())

	// Инициализируем последовательность.
	n := make([]int, 100)
	for i := 0; i < len(n); i++ {
		n[i] = i
	}

	// Случайным образом обнуляем число.
	i := rand.Intn(len(n))
	e := n[i] // extracted
	n[i] = 0

	// Перемешиваем массив.
	rand.Shuffle(len(n), func(i, j int) {
		n[i], n[j] = n[j], n[i]
	})

	// Ищем потерянное число.
	c := findNumber(n) // calculated

	// Выводим результат.
	negstr := ""
	if c != e {
		negstr = " не"
	}
	fmt.Printf("Изъято %d, получено %d, числа%s равны.\n", e, c, negstr)
}
